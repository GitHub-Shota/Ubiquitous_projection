#include <stdio.h>
#include <iostream>
#include <string>
#include <WinSock2.h> //windows
#include <Windows.h>
#include <opencv2\opencv.hpp>
#include <opencv2\highgui\highgui.hpp>

// Windows.hをインクルードしたい場合は、Windows.ｈよりもWinsock2.hを先にインクルードすること
// なんならWindows.ｈだけでも、Winsock2.hだけでも動く。

#pragma comment(lib, "ws2_32.lib")

// inet_addr()関数で警告が出る場合は以下で警告を無効化する。
#pragma warning(disable:4996) 

// 右クリックの状態（押された状態:1, 離した状態:0）
bool is_click = 0;

// グローバル座標
int old_x = 0, old_y = 0, new_x = 0, new_y = 0;

// パソコンサイズの黒画面
cv::Mat img(cv::Size(1920, 1080), CV_8UC3, cv::Scalar(0, 0, 0));

// 線を描写
void draw_line(int event, int x, int y, int flags, void* userdata)
{
    int sock;
    struct sockaddr_in addr;
    WSAData wsaData;

    WSACleanup();
    WSAStartup(MAKEWORD(2, 0), &wsaData);   //MAKEWORD(2, 0)はwinsockのバージョン2.0ってこと
    sock = socket(AF_INET, SOCK_DGRAM, 0);  //AF_INETはIPv4、SOCK_DGRAMはUDP通信、0は？

    addr.sin_family = AF_INET;
    addr.sin_port = htons(50008);// 待ち受けポート番号を50008にする
    addr.sin_addr.S_un.S_addr = inet_addr("127.0.0.1");// 送信アドレスを設定

    old_x = new_x;
    old_y = new_y;
    new_x = x;
    new_y = y;

    char old_xx[256];
    char old_yy[256];
    char new_xx[256];
    char new_yy[256];

    // 右クリック押下
    if (event == cv::EVENT_RBUTTONDOWN)
    {
        is_click = 1;
    }

    // 右クリックされている状態に点を描写
    if (is_click == 1)
    {
        sprintf(old_xx, "%d", old_x);
        sprintf(old_yy, "%d", old_y);
        sprintf(new_xx, "%d", new_x);
        sprintf(new_yy, "%d", new_y);

        //データ送信
        sendto(sock, old_xx, sizeof(old_xx), 0, (struct sockaddr*)&addr, sizeof(addr));//addrに文字列送信
        sendto(sock, old_yy, sizeof(old_yy), 0, (struct sockaddr*)&addr, sizeof(addr));//addrに文字列送信
        sendto(sock, new_xx, sizeof(new_xx), 0, (struct sockaddr*)&addr, sizeof(addr));//addrに文字列送信
        sendto(sock, new_yy, sizeof(new_yy), 0, (struct sockaddr*)&addr, sizeof(addr));//addrに文字列送信

        cv::line(img, cv::Point(old_x, old_y), cv::Point(new_x, new_y), cv::Scalar(0, 255, 0), 10, cv::LINE_AA);
    }

    // 右クリック離す
    if (event == cv::EVENT_RBUTTONUP)
    {
        is_click = 0;
    }
}


int main()
{

    // 表示するウィンドウに名前を付ける
    cv::namedWindow("from_Level1", cv::WINDOW_NORMAL);
    // フルスクリーン表示
    //cv::setWindowProperty("Level1", cv::WND_PROP_FULLSCREEN, cv::WINDOW_FULLSCREEN);
    cv::setMouseCallback("from_Level1", draw_line);

    // qが押されるまで表示を継続
    while (1)
    {
        cv::imshow("from_Level1", img);

        int key = cv::waitKey(1);
        // qボタンが押されたときwhileループから抜ける
        if (key == 113)
        {
            break;
        }
    }

    // ウィンドウを閉じる
    cv::destroyAllWindows();

    return 0;
}
