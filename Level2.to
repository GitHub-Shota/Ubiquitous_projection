#include <stdio.h>
#include <string.h>
#include <WinSock2.h> //windows
#include <Windows.h>
#include <windowsx.h>
#include <iostream>
#include <opencv2\opencv.hpp>
#include <opencv2\highgui\highgui.hpp>


#pragma comment(lib, "ws2_32.lib")
#pragma warning(disable:4996) // inet_addr()関数で警告が出る場合は以下で警告を無効化する。

int main() {

    WSAData wsaData;
    WSAStartup(MAKEWORD(2, 0), &wsaData);   //MAKEWORD(2, 0)はwinsockのバージョン2.0ってこと
    int sock = socket(AF_INET, SOCK_DGRAM, 0);  //AF_INETはIPv4、SOCK_DGRAMはUDP通信、0は？
    sock = socket(AF_INET, SOCK_DGRAM, 0);  //AF_INETはIPv4、SOCK_DGRAMはUDP通信、0は？

    // アドレス等格納
    struct sockaddr_in addr;
    addr.sin_family = AF_INET;  //IPv4
    addr.sin_port = htons(50008);   //通信ポート番号設定
    addr.sin_addr.S_un.S_addr = INADDR_ANY; // INADDR_ANYはすべてのアドレスからのパケットを受信する
    bind(sock, (struct sockaddr*)&addr, sizeof(addr));


    int old_x, old_y, new_x, new_y;

    // パソコンサイズの黒画面
    cv::Mat img(cv::Size(1920, 1080), CV_8UC3, cv::Scalar(0, 0, 0));

    // 表示するウィンドウに名前を付ける
    cv::namedWindow("to_Level1", cv::WINDOW_NORMAL);

    // フルスクリーン表示
    // cv::setWindowProperty("Level1", cv::WND_PROP_FULLSCREEN, cv::WINDOW_FULLSCREEN);

    while (1)
    {
        cv::imshow("to_Level1", img);

        char old_xx[256];
        char old_yy[256];
        char new_xx[256];
        char new_yy[256];

        memset(old_xx, 0, 100);
        recv(sock, old_xx, 100, 0);
        old_x = atoi(old_xx);
        printf("recv : %d \n", old_x);

        memset(old_yy, 0, 100);
        recv(sock, old_yy, 100, 0);
        old_y = atoi(old_yy);
        printf("recv : %d \n", old_y);

        memset(new_xx, 0, 100);
        recv(sock, new_xx, 100, 0);
        new_x = atoi(new_xx);
        printf("recv : %d \n", new_x);

        memset(new_yy, 0, 100);
        recv(sock, new_yy, 100, 0);
        new_y = atoi(new_yy);
        printf("recv : %d \n", new_y);

        cv::line(img, cv::Point(old_x, old_y), cv::Point(new_x, new_y), cv::Scalar(0, 255, 0), 10, cv::LINE_AA);

        int key = cv::waitKey(1);

        // qボタンが押されたときwhileループから抜ける
        if (key == 113)
        {
            break;
        }
    }

    // ウィンドウを閉じる
    cv::destroyAllWindows();

    closesocket(sock);
    WSACleanup();

    return 0;
}
